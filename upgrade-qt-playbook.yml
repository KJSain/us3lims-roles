---
# initial upgrade playbook, carefully add capabilities
- hosts: 
## done after llvm/clang
## umontanahost  demeler9host

#to do separately canterbury2host
## done:
## ndsu, catalent, umn, latrobe, juelich, demeler2, hexalepyc, hexalryzen, konstanzhost, novavaxhost, rochehost, pennstatehost, zentriforce1host, zentriforce2host

  gather_facts: yes
  remote_user:  usadmin
  become:       yes
  
  pre_tasks:
#  - name: System details
#    debug: msg="{{ item }}"
#    with_items:
#      - "{{ ansible_os_family }}"
#      - "{{ ansible_distribution }}"
#      - "{{ ansible_distribution_version }}"
#      - "{{ ansible_distribution_major_version }}"

## cli example, but double check esp. user_home, us3_branch & optimization
## ansible-playbook upgrade-qt-playbook.yml -e "optimization='-march=native'" -e "us3_branch='release-2024-Q4'" -e "qt_force_rebuild=1" -e "user_home='/home'" -e "install_commercial=XXXtrue or falseXXX" -e "run=1"

  - name: Usage
    ansible.builtin.debug:
      msg: "\
      Options:\n\
      -e \"run=1\"                : actually run the build roles, otherwise, just gleaned info is displayed\n\
      -e \"optimization='X'\"     : set optimization level. X contains your desired optimization flags (e.g. -m64,-march=native)\n\
      _________________________ : note that VMs may need -m64 as on some vm hosts -march=native fails\n\
      -e \"qt_force_rebuild=1\"   : recommended unless you *know* your qt,qwt & ultrascan are all compiled correctly\n\
      -e \"us3_branch='X'\"       : required branch specification. typically 'release-YYYY-Q#', perhaps 'master' on some systems\n\
      -e \"user_home='X'\"        : required home directory specification. typically '/home', but some client system have alternate home\n\
      -e \"install_commercial=X\" : required true or false, no quotes. If true, will install/update us_comproject icon\n\
      "

  - name: validate optimization
    fail:
      msg: "use -e \"optimization='X'\" where X contains your desired optimization flags (-m64,-march=native)"
    when: optimization is not defined and run is defined

  - name: validate branch
    fail:
      msg: "use -e \"us3_branch='X'\" required branch specification. typically 'release-YYYY-Q#', perhaps 'master' on some systems"
    when: us3_branch is not defined and run is defined

  - name: validate user_home
    fail:
      msg: "use -e \"user_home='X'\" required home directory specification. typically '/home', but some client system have alternate home"
    when: user_home is not defined and run is defined

  - name: validate install_commercial
    fail:
      msg: "use -e \"install_commercial=X\". Required true or false, no quotes. If true, will install/update us_comproject icon"
    when: install_commercial is not defined and run is defined

  - name: set powertools / crb
    set_fact:
      powertools: "crb"
    when: ansible_facts['distribution_major_version'] == '9'

  - name: set powertools / crb
    set_fact:
      powertools: "powertools"
    when: ansible_facts['distribution_major_version'] == '8'

  - name: get qtinfo
    shell: grep QTDIR /etc/modulefiles/ultrascan/gui-build | awk -F- '{ print $2 }'
    register: qtinfo

  - name: get qwtinfo
    shell: grep QWTDIR /etc/modulefiles/ultrascan/gui-build | awk -F- '{ print $4 }'
    register: qwtinfo

  - name: get mysqlversion
    shell: 'if [ -e /bin/mysql ]; then mysql --version ; else echo "no /bin/mysql found"; fi'
    register: mysqlinfo

  - name: get opensslversion
    shell: openssl version
    register: opensslinfo

  - name: get phpversion
    shell: 'if [ -e /usr/bin/php ]; then php -v ; else echo "no /usr/bin/php found"; fi'
    register: phpinfo

  - name: get mpi version
    shell: if [ -e /etc/modulefiles/mpi/mpich-x86_64 ]; then cmd=`egrep 'prepend-path\s+PATH\s+' /etc/modulefiles/mpi/mpich-x86_64 | awk '{ print $3 }'` && $cmd/mpicc -v; else echo 'no /etc/modulefiles/mpi/x86_64 found'; fi
    register: mpiinfo

  - name: set facts
    set_fact:
      qt_version_ref:  "{{ qtinfo.stdout_lines[0] }}"
      qwt_version_ref: "{{ qwtinfo.stdout_lines[0] }}"
      os_version:  "{{ ansible_distribution }} {{ ansible_distribution_version }}"
      mysql_version: "{{ mysqlinfo.stdout_lines[0] }}"
      openssl_version: "{{ opensslinfo.stdout_lines[0] }}"
      php_version: "{{ phpinfo.stdout_lines[0] }}"
      mpi_version: "{{ mpiinfo.stdout_lines[0] }}"
  - debug: msg="os_version {{ os_version }}\nqt_version_ref {{ qt_version_ref }}\nqwt_version_ref {{ qwt_version_ref }}\nmysql_version {{ mysql_version }}\nopenssl_version {{ openssl_version }}\nphp_version {{ php_version }}\nmpi_version {{ mpi_version }}"

  - name: "check disk space"
    shell: df -h
    register: dfinfo
  - debug: var=dfinfo.stdout_lines

  - name: exit if not run
    meta: end_play
    when: run is not defined

  roles:
  # lims-gui updates the desktop apps for the new path
    - config-lims-gui 
    - build-qt
    - build-qwt
    - build-us3
    - install-rasmol
    - update-users-dotlocal
### N.B. comment this next line for systems without mpi (GUI only sync'd systems)
    - build-us-mpi

  vars:
    - comp_opt: "{{ optimization }}"
    - qt_major_version:  "5.15"
    - qt_version:        "5.15.16"
    - qwt_version:       "6.1.6"
    - cores_for_parallel_compile: "{{ ansible_processor_vcpus }}"

    - slurm_cores : "{{ ansible_processor_vcpus }}"
    - slurm_sbatch_extras : ""
    # - slurm_sbatch_extras : "#SBATCH -O\n"

    
