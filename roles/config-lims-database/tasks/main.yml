---
- name: assert required variables are defined
  assert:
        that:
                - us3_db_pass is defined
                - gbl_db_pass is defined
                - root_db_pass is defined
                - us3php_db_pass is defined
                - admins_db_pass is defined

- name: Turn on proxychains if use_proxychains is true
  shell:
    cmd: "echo 'LD_PRELOAD=/usr/lib/libproxychains4.so' > /etc/environment"
  when: use_proxychains|default(false)
    
- name: Install mariadb & additionals
  dnf:
    enablerepo: powertools
    name:
      - mariadb-server
      - mariadb
      - python3-PyMySQL
    update_cache: yes

- name: Turn off proxychains if use_proxychains is true
  shell:
    cmd: "echo '# LD_PRELOAD=/usr/lib/libproxychains4.so' > /etc/environment"
  when: use_proxychains|default(false)

- name: Create Folder for custom mariadb service file
  file:
    path: /etc/systemd/system/mariadb.service.d/
    state: directory

- name: Add custom limits systemd file for mariadb
  template:
       src: limits.conf.j2
       dest: /etc/systemd/system/mariadb.service.d/limits.conf

- name: reload daemon
  systemd:
       daemon_reload: yes

- name: Make sure path mysql ssl folder path exists
  file:
    path: /etc/my.cnf.d/ssl
    state: directory
    owner: mysql
    group: mysql

- name: Copy over mysql ssl files from ultrascan
  copy:
    src: "{{ item }}"
    dest: /etc/my.cnf.d/ssl/{{ item }}
    owner: mysql
    group: mysql
    mode: 0640
  with_items:
       - server-cert.pem
       - server-key.pem
       - ca-cert.pem

- name: Template /etc/my.cnf
  template:
    src: my.cnf
    dest: /etc/my.cnf
    backup: yes

- name: add Gary's settings to mariadb-server
  ansible.builtin.lineinfile:
    path: /etc/my.cnf.d/mariadb-server.cnf
    insertafter: '^\[mysqld\]'
    line: |
      # Gary's settings
      skip-external-locking
      skip-name-resolve
      key_buffer_size         = 256M
      max_allowed_packet      = 256M
      table_open_cache        = 512
      sort_buffer_size        = 16M
      tmp_table_size          = 32M
      net_buffer_length       = 2M
      read_buffer_size        = 128k
      read_rnd_buffer_size    = 256k
      join_buffer_size        = 256k
      table_definition_cache  = 1400
      table_open_cache        = 2000
      ##table_open_cache_instances = 16
      myisam_sort_buffer_size = 256M
      connect_timeout         = 21600
      expire_logs_days        = 30
      #innodb_force_recovery   = 1
      innodb_file_per_table   = 1
      max_connections         = 25000
      max_user_connections    = 25000
      thread_cache_size       = 505
      query_cache_type        = 1
      # audit plugin
      # plugin_load_add = server_audit
      # server_audit=FORCE_PLUS_PERMANENT
      # server_audit_file_rotate_now=ON
      # server_audit_file_rotate_size=1000000
      # server_audit_file_rotations=5
      # server_audit_output_type=syslog
      # server_audit_file_path=/var/log/mariadb/auditlog
      # server_audit_logging=on
      ## Performance settings https://mariadb.com/kb/en/configuring-mariadb-for-optimal-performance
      innodb_buffer_pool_size = {{ innodb_buffer_pool_size }}
      innodb_log_file_size    = 1G
      innodb_flush_method     = O_DIRECT
      thread-handling         = pool-of-threads
      query_cache_size        = 512M
      query_cache_limit       = 384K

- name: start & enable MariaDB
  service:
       name: mariadb
       enabled: yes
       state: started

- name: check if root_pw_set
  shell: mysqladmin -u root status
  changed_when: false
  failed_when: false
  register: root_pwd_check

- name: Set intial MariaDB root password
  shell: /usr/bin/mysqladmin -u root password "{{ root_db_pass }}"
  when: root_pwd_check.rc == 0

# This might be better to be moved to a standalone playbook
- name: Change root database password
  mysql_user:
        name: 'root'
        host: "{{ item }}"
        append_privs: yes
        password: "{{ root_db_pass }}"
        login_unix_socket: /var/lib/mysql/mysql.sock
        login_user: root
        login_password: "{{ root_old_db_pass }}"
  with_items:
        - "{{ hostname}}"
        - 127.0.0.1
        - localhost
        - ::1
  when: root_old_db_pass is defined

- name: Remove anon user
  mysql_user:
          name: ''
          host_all: yes
          state: absent
          login_unix_socket: /var/lib/mysql/mysql.sock
          login_user: root
          login_password: "{{ root_db_pass }}"

- name: Create databases and tables
  include: create-database.yml

- name: Create db grants
  include: create-grants.yml
