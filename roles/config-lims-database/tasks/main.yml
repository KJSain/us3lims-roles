---
- name: assert required variables are defined
  assert:
        that:
                - us3_db_pass is defined
                - gbl_db_pass is defined
                - root_db_pass is defined
                - us3php_db_pass is defined

- name: Install mariadb & additionals
  dnf:
    enablerepo: PowerTools
    name:
      - mariadb-server
      - mariadb
      - python3-PyMySQL

- name: Create Folder for custom mariadb service file
  file:
    path: /etc/systemd/system/mariadb.service.d/
    state: directory

- name: Add custom limits systemd file for mariadb
  template:
       src: limits.conf.j2
       dest: /etc/systemd/system/mariadb.service.d/limits.conf

- name: reload daemon
  systemd:
       daemon_reload: yes

- name: start MariaDB
  service:
       name: mariadb
       state: started

- name: check if root_pw_set
  shell: mysqladmin -u root status
  changed_when: false
  failed_when: false
  register: root_pwd_check

- name: Set intial MariaDB root password
  shell: /usr/bin/mysqladmin -u root password "{{ root_db_pass }}"
  when: root_pwd_check.rc == 0

# This might be better to be moved to a standalone playbook
- name: Change root database password
  mysql_user:
        name: 'root'
        host: "{{ item }}"
        append_privs: yes
        password: "{{ root_db_pass }}"
        login_user: root
        login_password: "{{ root_old_db_pass }}"
  with_items:
        - "{{ ansible_fqdn }}"
        - 127.0.0.1
        - localhost
        - ::1
  when: root_old_db_pass is defined

- name: Remove anon user
  mysql_user:
          name: ''
          host_all: yes
          state: absent
          login_user: root
          login_password: "{{ root_db_pass }}"

- name: Create database
  include: create-database.yml

- name: Grant us3 user USAGE
  mysql_user:
        name: '{{ us3_db_user }}'
        host: "{{ item }}"
        append_privs: yes
        priv: '*.*:USAGE'
        password: "{{ us3_db_pass }}"
        login_user: root
        login_password: "{{ root_db_pass }}"
  with_items:
        - "{{ server_name }}"
        - 127.0.0.1
        - localhost
        - ::1

- name: Grant us3php USAGE
  mysql_user:
        name: 'us3php'
        host: "{{ item }}"
        priv: '*.*:USAGE'
        append_privs: yes
        password: '{{ us3php_db_pass }}'
        login_user: root
        login_password: "{{ root_db_pass }}"
  with_items:
        - "{{ server_name }}"
        - 127.0.0.1
        - localhost
        - ::1

- name: Grant us3 user ALL on newus3
  mysql_user:
        name: '{{ us3_db_user }}'
        host: "{{ item }}"
        priv: 'newus3.*:ALL'
        append_privs: yes
        password: "{{ us3_db_pass }}"
        login_user: root
        login_password: "{{ root_db_pass }}"
  with_items:
        - "{{ server_name }}"
        - 127.0.0.1
        - localhost
        - ::1

- name: Grant us3php ALL on newus3
  mysql_user:
        name: 'us3php'
        host: "{{ item }}"
        priv: 'newus3.*:ALL'
        password: '{{ us3php_db_pass }}'
        append_privs: yes
        login_user: root
        login_password: "{{ root_db_pass }}"
  with_items:
        - "{{ server_name }}"
        - 127.0.0.1
        - localhost
        - ::1

- name: Grant gfac ALL on gfac
  mysql_user:
        name: '{{ gbl_db_user }}'
        host: "{{ item }}"
        priv: "{{ gbl_db_name }}.*:ALL"
        append_privs: yes
        password: '{{ gbl_db_pass }}'
        login_user: root
        login_password: "{{ root_db_pass }}"
  with_items:
        - "{{ server_name }}"
        - 127.0.0.1
        - localhost
        - ::1

- name: Make sure path mysql ssl folder path exists
  file:
    path: /etc/my.cnf.d/ssl
    state: directory
    owner: mysql
    group: mysql

- name: Copy over mysql ssl files from ultrascan
  copy:
    src: "{{ item }}"
    dest: /etc/my.cnf.d/ssl/{{ item }}
    owner: mysql
    group: mysql
    mode: 0640
  with_items:
       - server-cert.pem
       - server-key.pem
       - ca-cert.pem

- name: Copy over my.cnf
  copy:
    src: my.cnf
    dest: /etc/my.cnf
    backup: yes
